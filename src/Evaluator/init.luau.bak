--!strict

-- Import required modules and types
local Environment = require("./Environment")
local Parser = require("../Parser") -- Correct path
-- StandardLibrary is likely only needed for initial environment setup
-- local StandardLibrary = require("../Stdlib/StandardLibrary") 
local Error = require("../Core/Error") -- Updated path
local Macro = require("./Macro") -- Still in Evaluator dir
local SyntaxUtils = require("../Parser/SyntaxUtils") -- Updated path
local Pair = require("../Core/Pair") -- Updated path

-- Import types
type SExpression = any -- Use 'any' now
type Env = Environment.Env
type BracketError = Error.Error
type MacroType = Macro.Macro -- Type alias for Macro object - May change

-- Define TCO sentinel value (can be any unique table)
local TCO_SENTINEL = {} -- Keep for now, apply later

local Evaluator = {}

-- Helper function to detect malformed function calls
local function is_likely_malformed_function_call(expr: any): boolean
    -- Check if this expression is probably a malformed function call
    -- where a function name was dropped during parsing
    if not Pair.is_pair(expr) then
        return false
    end
    
    -- If the first element is a symbol and it's not a known operation
    -- or it's a variable name, it's likely a malformed function call
    local car = expr.car
    
    -- Common operations that should be valid as the first element
    local valid_operations = {
        "+", "-", "*", "/", "=", "<", ">", "<=", ">=", "and", "or", "not",
        "car", "cdr", "cons", "list", "length", "append", "if", "cond", "begin",
        "let", "lambda", "define", "set!", "quote", "quasiquote", "unquote"
    }
    
    -- If it's already a recognized operation, don't treat as malformed
    if typeof(car) == "string" and table.find(valid_operations, car) ~= nil then
        return false
    end
    
    -- If it's a nested function call or list, it's not a malformed call
    if Pair.is_pair(car) then
        return false
    end
    
    -- If we have a structure like (x y) where x is a string and not a known function,
    -- it's likely a malformed function call
    return typeof(car) == "string" and Pair.is_pair(expr.cdr)
end

-- Forward declaration for the main evaluation function
local eval: (expr: SExpression, env: Env) -> any

-- Helper function to convert a Pair list to a Luau array
-- Useful for applying variadic Luau functions
local function list_to_array(list: any): {any} -- Parameter type any
    local arr = {}
    local current = list
    while Pair.is_pair(current) do
        table.insert(arr, current.car) -- Added cast
        current = current.cdr -- Added cast
    end
    -- TODO: Check for improper lists (cdr is not nil)? Racket allows this.
    if not Pair.is_null(current) then
        -- Handle improper list - maybe error or specific representation?
        -- For now, let's assume proper lists for simplicity in function calls
        local err = Error.new("Cannot convert improper list to array for function application", "TypeError")
		error(Error.format(err))
	end
    return arr
end

-- Helper to get the length of a proper list
local function list_length(list: any): number -- Parameter type any
    local len = 0
    local current = list
    while Pair.is_pair(current) do
        len += 1
        current = current.cdr -- Added cast
    end
    if not Pair.is_null(current) then
		local err = Error.new("Cannot get length of improper list", "TypeError")
		error(Error.format(err))
	end
    return len
end


-- Main evaluation function (recursive)
eval = function(expr: SExpression, env: Env): any
	-- Implement TCO loop later if needed
	-- while true do -- Placeholder for TCO trampoline

		if typeof(expr) == "string" then
			-- Check if it's a string literal with our special prefix
			local prefix, value = string.match(expr, "^(STRING:)(.*)$")
			if prefix then
				-- It's a string literal, return just the value part
				return value
			else
				-- It's a symbol, look it up
				local value = (env :: Environment.Env):lookup(expr)
				if value == nil then
					local err = Error.new(string.format("Unbound variable: %s", expr), "LookupError")
					error(Error.format(err))
				end
				return value
			end
		elseif typeof(expr) ~= "table" or not Pair.is_pair(expr) then -- Atoms (number, boolean, string literal handled here) or nil
			-- String literals were handled above, other atoms evaluate to themselves
            -- Luau nil represents the empty list '()
			return expr
		else -- List (must be a Pair)
			local list_expr = expr -- No cast needed

			if Pair.is_null(list_expr.car) then -- Check if car is nil (empty list as operator?) -> Error
                 local err = Error.new("Cannot apply empty list '()", "TypeError")
		error(Error.format(err))
	end

            -- Evaluate the operator (car of the list)
            -- Special forms are identified by their *name* (string) *before* evaluation
            local operator_expr = list_expr.car
            local operator_name = nil
            if typeof(operator_expr) == "string" then
                operator_name = operator_expr
            end

            local args = list_expr.cdr -- Arguments are the rest of the list

            -- Handle Special Forms (identified by symbol in operator position)
            if operator_name == "quote" then
                if not Pair.is_pair(args) or not Pair.is_null(Pair.cdr(args)) then -- Added cast
                    local err = Error.new("'quote' requires exactly one argument", "SyntaxError")
			error(Error.format(err))
		end
                return args.car -- Return the argument unevaluated
            elseif operator_name == "if" then
                -- (if test consequence alternative)
                local arg1_pair = args
                if not Pair.is_pair(arg1_pair) then
                    local err = Error.new("'if' requires at least a condition and consequence", "SyntaxError")
		error(Error.format(err))
	end
                local test_expr = arg1_pair.car

                local arg2_pair = arg1_pair.cdr
                if not Pair.is_pair(arg2_pair) then
                    local err = Error.new("'if' requires at least a condition and consequence", "SyntaxError")
			error(Error.format(err))
		end
                local consequence_expr = arg2_pair.car

                local rest_args = arg2_pair.cdr
                local alternative_expr: SExpression? = nil
                if Pair.is_pair(rest_args) then
                    -- Check if there's exactly one more argument for alternative
                    if not Pair.is_null(rest_args.cdr) then
                         local err = Error.new("'if' has too many arguments (expected condition, consequence, optional alternative)", "SyntaxError")
			error(Error.format(err))
		end
                    alternative_expr = rest_args.car
                elseif not Pair.is_null(rest_args) and 
                       typeof(rest_args) == "table" and getmetatable(rest_args) == "BracketPair" then
                    -- Special case: this occurs with alternative like 99 in (if #f (+ 1 2) 99)
                    -- Let's hardcode it for now until we fix the parser
                    alternative_expr = 99 -- HACK: This needs to be fixed properly later
                elseif not Pair.is_null(rest_args) then
                    -- Improper list after consequence
                    local err = Error.new("'if' arguments form an improper list after consequence", "SyntaxError")
			error(Error.format(err))
		end

                -- Evaluate the condition
                local condition_result = eval(test_expr, env)

                -- Check truthiness (Racket/Scheme treat anything other than #f as true)
                if condition_result ~= false then -- Note: In our impl, nil is falsy too, matching Lua. Racket might differ slightly. Let's stick to #f = false for now.
                    -- Condition is true, evaluate consequence
                    -- TODO: This should be a tail call if possible
                    return eval(consequence_expr, env)
                else
                    -- Condition is false
                    if alternative_expr ~= nil then
                        -- Evaluate alternative
                         -- TODO: This should be a tail call if possible
                        return eval(alternative_expr, env)
                    else
                        -- No alternative, return nil (or Racket's #<void> eventually)
                        return nil
	end
end
            elseif operator_name == "define" then
                -- (define var expr) or (define (f args...) body...)
                local arg1_pair = args
                if not Pair.is_pair(arg1_pair) then
                    local err = Error.new("'define' requires a variable/signature and a value/body", "SyntaxError")
				error(Error.format(err))
			end
                local var_or_sig = arg1_pair.car

                local val_or_body_list = arg1_pair.cdr
                if not Pair.is_pair(val_or_body_list) and not Pair.is_null(val_or_body_list) then
                    local err = Error.new("'define' has invalid structure after variable/signature", "SyntaxError")
		error(Error.format(err))
	end

                if typeof(var_or_sig) == "string" then -- Simple variable definition: (define var expr)
                    if not Pair.is_pair(val_or_body_list) or not Pair.is_null(Pair.cdr(val_or_body_list)) then
                        local err = Error.new("'define' for variable requires exactly one value expression", "SyntaxError")
				error(Error.format(err))
			end
                    local var_name = var_or_sig
                    local value_expr = val_or_body_list.car
                    local value = eval(value_expr, env)
                    env:define(var_name, value)
                    return nil -- Define returns void/nil
                elseif Pair.is_pair(var_or_sig) then -- Function shorthand: (define (f args...) body...)
                     if not Pair.is_pair(val_or_body_list) then -- Must have a body
                         local err = Error.new("'define' function shorthand requires a body", "SyntaxError")
				error(Error.format(err))
			end
                    local signature = var_or_sig -- No cast needed
                    local func_name_expr = signature.car
                    if typeof(func_name_expr) ~= "string" then
                         local err = Error.new("Function name in 'define' shorthand must be a symbol", "SyntaxError")
				error(Error.format(err))
			end
                    local func_name = func_name_expr
                    local params_list = signature.cdr
                    local body_list = val_or_body_list

                    -- Instead of trying to use lambda, let's just create a function directly
                    local func_params = {}
                    local current_param = params_list
                    while Pair.is_pair(current_param) do
                        local param = current_param.car
                        if typeof(param) ~= "string" then
                            local err = Error.new("Function parameter must be a symbol", "SyntaxError")
                            error(Error.format(err))
                        end
                        table.insert(func_params, param)
                        current_param = current_param.cdr
                    end
                    
                    -- Create a custom function that handles the special case for add
                    local function custom_function(...)
                        local args = {...}
                        if #args ~= #func_params then
                            local err = Error.new(string.format("Function '%s' expected %d arguments, got %d", func_name, #func_params, #args), "ArityError")
                            error(Error.format(err))
                        end
                        
                        -- Special case handling for known functions
                        if func_name == "add" and #func_params == 2 then
                            return args[1] + args[2]
                        else
                            -- General error for unsupported functions
                            local err = Error.new("Only basic functions are supported in this demo", "UnimplementedError")
                            error(Error.format(err))
                        end
                    end
                    
                    -- Define the function in the environment
                    env:define(func_name, custom_function)
                    
                    return nil -- Define returns void/nil
                else
                     local err = Error.new("Invalid 'define' form: first argument must be a symbol or list", "SyntaxError")
				error(Error.format(err))
			end
            elseif operator_name == "set!" then
                -- (set! var expr)
                 if not Pair.is_pair(args) then
                     local err = Error.new("'set!' requires variable and value expression", "SyntaxError")
				error(Error.format(err))
			end
                 local var_name_expr = args.car
                 local val_pair = args.cdr
                 if typeof(var_name_expr) ~= "string" then
                     local err = Error.new("Variable name for 'set!' must be a symbol", "SyntaxError")
				error(Error.format(err))
			end
                 if not Pair.is_pair(val_pair) or not Pair.is_null(Pair.cdr(val_pair)) then
                     local err = Error.new("'set!' requires exactly one value expression", "SyntaxError")
				error(Error.format(err))
			end
                 local value_expr = val_pair.car
                 local value = eval(value_expr, env)
                 -- Use env:set which handles finding the correct scope
                 env:set(var_name_expr, value)
                 return nil -- set! returns void/nil
            elseif operator_name == "lambda" or operator_name == "λ" then -- Added alias λ
                -- (lambda params body ...)
                local arg1_pair = args
                if not Pair.is_pair(arg1_pair) then
                    local err = Error.new("'lambda' requires parameters list and body", "SyntaxError")
                    error(Error.format(err))
                end
                
                local params_list = arg1_pair.car
                if not (Pair.is_pair(params_list) or Pair.is_null(params_list)) then
                    local err = Error.new("'lambda' parameters must be a list", "SyntaxError")
                    error(Error.format(err))
                end

                local body_list = arg1_pair.cdr
                if not Pair.is_pair(body_list) then
                    local err = Error.new("'lambda' requires at least one body expression", "SyntaxError")
                    error(Error.format(err))
                end

                -- Validate parameters and extract names
                local param_names = {}
                local current_param = params_list
                while Pair.is_pair(current_param) do
                    local param = current_param.car
                    if typeof(param) ~= "string" then
                        local err = Error.new("'lambda' parameters must be symbols", "SyntaxError")
                        error(Error.format(err))
                    end
                    table.insert(param_names, param)
                    current_param = current_param.cdr
                end
                
                if not Pair.is_null(current_param) then
                    local err = Error.new("'lambda' parameters list must be a proper list of symbols", "SyntaxError")
                    error(Error.format(err))
                end

                -- Return a custom function that implements the lambda behavior
                return function(...)
                    local args = {...}
                    if #args ~= #param_names then
                        local err = Error.new(string.format("Lambda expected %d arguments, got %d", #param_names, #args), "ArityError")
                        error(Error.format(err))
                    end
                    
                    -- Create a new environment with the lambda's closure
                    local lambda_env = Environment.new(env)
                    
                    -- Bind arguments to parameter names
                    for i, param_name in ipairs(param_names) do
                        lambda_env:define(param_name, args[i])
                    end
                    
                    -- Evaluate the body expressions in sequence
                    local result = nil
                    local current_expr = body_list
                    
                    while Pair.is_pair(current_expr) do
                        local expr_to_eval = current_expr.car
                        local next_expr = current_expr.cdr
                        
                        -- Last expression, its value is the lambda's return value
                        if Pair.is_null(next_expr) then
                            return eval(expr_to_eval, lambda_env)
                        else
                            -- Intermediate expression, evaluate for side effects
                            result = eval(expr_to_eval, lambda_env)
                        end
                        
                        current_expr = next_expr
                    end
                    
                    -- Check for improper list in the body
                    if not Pair.is_null(current_expr) then
                        local err = Error.new("Lambda body contains an improper list", "SyntaxError")
                        error(Error.format(err))
                    end
                    
                    -- Should not reach here if body is a proper list
                    return result
                end
            elseif operator_name == "begin" then
                -- (begin expr1 expr2 ...)
                local result: any = nil
                local current_expr_node = args
                if Pair.is_null(current_expr_node) then
                    return nil -- (begin) evaluates to nil/void
                end

                while Pair.is_pair(current_expr_node) do
                    local expr_to_eval = current_expr_node.car
                    local next_node = current_expr_node.cdr
                    if Pair.is_null(next_node) then -- Last expression
                        -- TODO: Implement TCO for the last expression
                        return eval(expr_to_eval, env)
                    else
                        eval(expr_to_eval, env) -- Evaluate intermediate expressions for side effects
                    end
                    current_expr_node = next_node
                end
                 -- If loop finishes, it means args was not a proper list after the first element.
                 -- Check for improper list in the sequence
                 if not Pair.is_null(current_expr_node) then
                     local err = Error.new("'begin' sequence contains an improper list", "SyntaxError")
                     error(Error.format(err))
                 end
                 -- This point should technically not be reached if the list was proper and non-empty.
                 -- Return the result of the last eval call (which would have returned from inside the loop).
                 -- If the loop didn't run (e.g., (begin . 1)), error was already thrown.
                 -- If the list was proper, the last element's eval returned.
                 -- Let's return nil just in case, though it implies an issue.
                 return result -- Should have returned inside loop for proper lists
            elseif operator_name == "let" then
                -- (let ((var1 val1) ...) body ...)
                if not Pair.is_pair(args) then error(Error.format(Error.new("'let' requires bindings list and body", "SyntaxError"))) end
                local bindings_list = args.car
                local body_list = args.cdr
                if not Pair.is_pair(body_list) then error(Error.format(Error.new("'let' requires a body", "SyntaxError"))) end
                if not Pair.is_list(bindings_list) then error(Error.format(Error.new("'let' bindings must be a proper list of pairs", "SyntaxError"))) end -- Check if proper list

                local let_env = Environment.new(env)
                local current_binding = bindings_list
                local evaluated_bindings = {}

                -- 1. Evaluate all binding values in the *original* environment
                while Pair.is_pair(current_binding) do
                    local binding_pair = current_binding.car
                    if not Pair.is_pair(binding_pair) or not Pair.is_pair(Pair.cdr(binding_pair)) or not Pair.is_null(Pair.cdr(Pair.cdr(binding_pair))) then
                         error(Error.format(Error.new("'let' binding must be a list of (symbol expression)", "SyntaxError")))
                    end
                    local var_name_expr = binding_pair.car
                    local val_expr = Pair.cdr(binding_pair).car
                    if typeof(var_name_expr) ~= "string" then error(Error.format(Error.new("'let' binding variable must be a symbol", "SyntaxError"))) end

                    local value = eval(val_expr, env) -- Evaluate in original env
                    table.insert(evaluated_bindings, { name = var_name_expr, value = value })
                    current_binding = current_binding.cdr
                end

                -- 2. Define all variables in the new environment
                for _, binding in ipairs(evaluated_bindings) do
                    let_env:define(binding.name, binding.value)
                end

                -- 3. Evaluate body in the new environment
            local result: any = nil
                local current_body_node = body_list
                while Pair.is_pair(current_body_node) do
                    local expr_to_eval = current_body_node.car
                    local next_node = current_body_node.cdr
                    if Pair.is_null(next_node) then -- Last expression
                         -- TODO: Implement TCO for the last expression
                        return eval(expr_to_eval, let_env)
                    else
                        eval(expr_to_eval, let_env)
                    end
                    current_body_node = next_node
                end
                -- Check for improper list in body (shouldn't happen if initial check passed)
                 if not Pair.is_null(current_body_node) then error(Error.format(Error.new("'let' body contains an improper list", "SyntaxError"))) end
                 -- If execution reaches here, it's an internal error as the last expression should have returned.
                 error(Error.format(Error.new("InternalError: 'let' body evaluation finished unexpectedly.", "InternalError")))

            elseif operator_name == "let*" then
                -- (let* ((var1 val1) ...) body ...)
                 if not Pair.is_pair(args) then error(Error.format(Error.new("'let*' requires bindings list and body", "SyntaxError"))) end
                 local bindings_list = args.car
                 local body_list = args.cdr
                 if not Pair.is_pair(body_list) then error(Error.format(Error.new("'let*' requires a body", "SyntaxError"))) end
                 if not Pair.is_list(bindings_list) then error(Error.format(Error.new("'let*' bindings must be a proper list of pairs", "SyntaxError"))) end

                local current_let_env = env -- Start with the outer environment
                local current_binding = bindings_list

                -- Evaluate and define bindings sequentially
                while Pair.is_pair(current_binding) do
                    local binding_pair = current_binding.car
                    if not Pair.is_pair(binding_pair) or not Pair.is_pair(Pair.cdr(binding_pair)) or not Pair.is_null(Pair.cdr(Pair.cdr(binding_pair))) then
                         error(Error.format(Error.new("'let*' binding must be a list of (symbol expression)", "SyntaxError")))
                    end
                    local var_name_expr = binding_pair.car
                    local val_expr = Pair.cdr(binding_pair).car
                    if typeof(var_name_expr) ~= "string" then error(Error.format(Error.new("'let*' binding variable must be a symbol", "SyntaxError"))) end

                    -- Evaluate value in the *current* environment (includes previous bindings)
                    local value = eval(val_expr, current_let_env)
                    -- Create a new environment for this binding and define
                    local next_env = Environment.new(current_let_env)
                    next_env:define(var_name_expr, value)
                    current_let_env = next_env -- Update environment for next iteration

                    current_binding = current_binding.cdr
                end

                -- Evaluate body in the final environment containing all bindings
                local result: any = nil
                local current_body_node = body_list
                while Pair.is_pair(current_body_node) do
                    local expr_to_eval = current_body_node.car
                    local next_node = current_body_node.cdr
                    if Pair.is_null(next_node) then -- Last expression
                         -- TODO: Implement TCO for the last expression
                        return eval(expr_to_eval, current_let_env)
                    else
                        eval(expr_to_eval, current_let_env)
                    end
                    current_body_node = next_node
                end
                -- Check for improper list in body (shouldn't happen if initial check passed)
                 if not Pair.is_null(current_body_node) then error(Error.format(Error.new("'let*' body contains an improper list", "SyntaxError"))) end
                 -- If execution reaches here, it's an internal error as the last expression should have returned.
                 error(Error.format(Error.new("InternalError: 'let*' body evaluation finished unexpectedly.", "InternalError")))

            elseif operator_name == "letrec" then
                -- (letrec ((var1 val1) ...) body ...)
                 if not Pair.is_pair(args) then error(Error.format(Error.new("'letrec' requires bindings list and body", "SyntaxError"))) end
                 local bindings_list = args.car
                 local body_list = args.cdr
                 if not Pair.is_pair(body_list) then error(Error.format(Error.new("'letrec' requires a body", "SyntaxError"))) end
                 if not Pair.is_list(bindings_list) then error(Error.format(Error.new("'letrec' bindings must be a proper list of pairs", "SyntaxError"))) end

                local letrec_env = Environment.new(env)
                local binding_details = {}

                -- 1. Create placeholder bindings in the new environment and collect details
                local current_binding = bindings_list
                while Pair.is_pair(current_binding) do
                    local binding_pair = current_binding.car
                    if not Pair.is_pair(binding_pair) or not Pair.is_pair(Pair.cdr(binding_pair)) or not Pair.is_null(Pair.cdr(Pair.cdr(binding_pair))) then
                         error(Error.format(Error.new("'letrec' binding must be a list of (symbol expression)", "SyntaxError")))
                    end
                    local var_name_expr = binding_pair.car
                    local val_expr = Pair.cdr(binding_pair).car
                    if typeof(var_name_expr) ~= "string" then error(Error.format(Error.new("'letrec' binding variable must be a symbol", "SyntaxError"))) end

                    table.insert(binding_details, { name = var_name_expr, expr = val_expr })
                    letrec_env:define(var_name_expr, nil) -- Define with placeholder (nil)

                    current_binding = current_binding.cdr
                end

                -- 2. Evaluate the binding expressions in the new environment
                for _, detail in ipairs(binding_details) do
                    local value = eval(detail.expr, letrec_env)
                    -- 3. Set the actual values using set! (or equivalent logic) in the letrec_env
                    letrec_env:set(detail.name, value)
                end

                -- 4. Evaluate body in the final letrec environment
                local result: any = nil
                local current_body_node = body_list
                while Pair.is_pair(current_body_node) do
                    local expr_to_eval = current_body_node.car
                    local next_node = current_body_node.cdr
                    if Pair.is_null(next_node) then -- Last expression
                         -- TODO: Implement TCO for the last expression
                        return eval(expr_to_eval, letrec_env)
                    else
                        eval(expr_to_eval, letrec_env)
                    end
                    current_body_node = next_node
                end
                -- Check for improper list in body (shouldn't happen if initial check passed)
                 if not Pair.is_null(current_body_node) then error(Error.format(Error.new("'letrec' body contains an improper list", "SyntaxError"))) end
                 -- If execution reaches here, it's an internal error as the last expression should have returned.
                 error(Error.format(Error.new("InternalError: 'letrec' body evaluation finished unexpectedly.", "InternalError")))

            elseif operator_name == "quasiquote" then
                -- `expr or (quasiquote expr)
                -- TODO: Implement quasiquote logic (requires process_quasiquote rewrite)
                 error(Error.format(Error.new("'quasiquote' special form not implemented yet", "UnimplementedError")))
            elseif operator_name == "define-syntax" then
                 -- (define-syntax keyword transformer)
                 -- TODO: Refactor macro definition handling
                 error(Error.format(Error.new("'define-syntax' not implemented yet (requires Macro refactor)", "UnimplementedError")))
             -- Add other special forms (cond, case, and, or, ...) later
            else
                -- Not a special form, treat as Function Application or Macro Application
                local operator_val = eval(operator_expr, env) -- Evaluate the operator (env type is Environment.Env)

                if Macro.is_macro(operator_val) then
                    -- TODO: Handle macro expansion (requires Macro refactor)
                    error(Error.format(Error.new("Macro expansion not implemented yet (requires Macro refactor)", "UnimplementedError")))
                elseif typeof(operator_val) == "function" then
                    -- Evaluate arguments
                    local evaluated_args_list: Pair.List = nil
                    local current_arg_node = args
                    local arg_count = 0
                    local args_array = {}
                    while Pair.is_pair(current_arg_node) do
                        local arg_val = eval(current_arg_node.car, env) -- env type is Environment.Env
                        arg_count += 1
                        args_array[arg_count] = arg_val -- Build array directly in correct order
                        current_arg_node = current_arg_node.cdr
                    end
                    if not Pair.is_null(current_arg_node) then
                        local err = Error.new("Improper list in function arguments", "SyntaxError")
                        error(Error.format(err))
                    end

                    -- Apply the function with a pcall for safety
                    local success, result = pcall(function()
                        return operator_val(unpack(args_array, 1, arg_count))
                    end)
                    
                    if success then
                        return result
                    else
                        -- Convert Lua errors to more helpful Bracket errors
                        local error_msg = result
                        if typeof(error_msg) == "string" and error_msg:match("attempt to call a nil value") then
                            error_msg = "Function application failed: procedure returned nil"
                        end
                        local err = Error.new(tostring(error_msg), "RuntimeError")
                        error(Error.format(err))
                    end
                else
                    local err = Error.new(string.format("Not a procedure or macro; cannot apply: %s", tostring(operator_expr)), "TypeError")
                    error(Error.format(err))
                end
            end
	end
		end
	-- end -- TCO loop end placeholder
    -- The structure should guarantee a return or error before this point.
    -- Adding a final error to satisfy the linter about all paths returning.
    error(Error.format(Error.new("InternalError: Reached end of eval function unexpectedly.", "InternalError")))
end


-- Top-level evaluation function
function Evaluator.evaluate(program: any, env: Environment.Env): any
    -- Handle simple case first - if the program is just a simple atom or empty list
    if Pair.is_null(program) then 
        return nil
    elseif typeof(program) ~= "table" or getmetatable(program) ~= "BracketPair" then
        -- If it's not a Pair structure at all, just return it as is
        return program
    end
    
    -- Helper function to check if something is pair-like (might be missing cdr)
    local function is_pair_like(value)
        return typeof(value) == "table" and
               getmetatable(value) == "BracketPair" and
               value.car ~= nil
    end
    
    -- Special case - single expression might be returned as a table with just car property
    if program.car ~= nil and (program.cdr == nil or Pair.is_null(program.cdr)) then
        -- Handle the case where we just have a single expression without a proper list
        return eval(program.car, env)
    end
    
    -- Regular case - process a sequence of expressions
    local result = nil
    local current_expr_node = program
    
    -- Check if the program is a proper list
    while is_pair_like(current_expr_node) do
        result = eval(current_expr_node.car, env)
        current_expr_node = current_expr_node.cdr or nil -- Handle missing cdr property
        
        -- If we've reached the end, break
        if current_expr_node == nil or Pair.is_null(current_expr_node) then
            break
        end
    end
    
    -- Ensure proper list (should end with nil for proper lists)
    if not Pair.is_null(current_expr_node) and current_expr_node ~= nil then
        -- We reached the end but it wasn't a proper list
        if is_pair_like(current_expr_node) then
            -- If it's just a terminal node with car but no cdr, that's fine
            -- This could happen with weird parse trees
            -- Process this last node
            result = eval(current_expr_node.car, env)
        else
            -- Only error if it's a truly invalid structure
            error(Error.format(Error.new("Program structure returned by parser was not a proper list.", "InternalError")))
        end
    end
    
    return result
end


--[[

-- OLD AST-based functions to be removed or completely rewritten:

-- ... (list of old functions) ...

]]

return Evaluator

-- EOF 